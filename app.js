/*
Document DB1: order_info, partitioned by order_time
order_id: unique
session_id, table_id: index
order_time, finish_time
total_price
order_items: JSON array of (item_id, item_quantity)
status: Not_finished(0), paid(1), finished(2), cancel(3)

Document DB2: item_info
item_id: unique, index
item_price
item_name
item_description
item_category
item_image: url
*/

// Frontend display
function getAllItems() {
    // Get all items from item_info DB
    // returns item_id, item_name, item_description, item_price, item_category, item_image for frontend display
}

exports.getAllItems = (req, res) => {
    /*comment*/
    getAllItems(...req)
}

app.get("/getAllItems", getAllItems);

// Frontend display
function getItemsByCategory(category) {
    // Get all items with the given category
    // returns item_id, item_name, item_description, item_price, item_category, item_image for frontend display
}

exports.getItemsByCategory = (req, res) => {
    /*comment*/
    getItemsByCategory(req.category)
}

app.get("/getItemsByCategory", getItemsByCategory);

// item_info DB: CRUD: admin level
function addItem(itemName, itemDescription, itemPrice, itemCategory, itemImage) {
    // Create a new item in the item_info db, generate a unique item_id
    // item_image is an external url for a cloud image repo for the current item
    // returns whether the item is successfully added or not
}

exports.addItem = (req, res) => {
    /*comment*/
    addItem(req.category)
}

app.post("/addItem", addItem);

function updateItem(itemId, itemName, itemDescription, itemPrice, itemCategory, itemImage) {
    // update an existing item by its id
    // returns whether the item is successfully updated or not
}

exports.updateItem = (req, res) => {
    /*comment*/
    updateItem(req.category)
}

app.post("/updateItem", updateItem);

function deleteItem(itemId) {
    // delete an item by its id
    // returns whether the item is successfully deleted or not
}

exports.deleteItem = (req, res) => {
    /*comment*/
    deleteItem(req.category)
}

app.post("/deleteItem", deleteItem);

// Order-related operations
function placeOrder(sessionId, tableId, orderItems) {
    // This function is called when a table of customers place an order
    // sessionId is generated by tablet frontend when the customers start ordering items
    // orderItems is an array of JSON object (itemId, itemQuantity)
    // it will create a new order in the order_info DB
    // returns whether the order is successfully created or not
}

exports.placeOrder = (req, res) => {
    /*comment*/
    placeOrder(req.category)
}

app.post("/placeOrder", placeOrder);

function getCurrentOrders(sessionId, tableId, orderDate) {
    // This function is called when the frontend tablet need to display the info of all orders so far
    // Based on orderDate, it will select the correct partition
    // Based on sessionId and tableId, it will query the order_info DB and extract all orders.
    // returns a list of JSON object orders
    // it will trigger frontend sessionId refresh: if current orders are finished, then it will refresh for
    // the next table of customers
}

exports.getCurrentOrders = (req, res) => {
    /*comment*/
    getCurrentOrders(req.category)
}

app.post("/getCurrentOrders", getCurrentOrders);

function updateOrderStatus(session_id, table_id, status) {
    // status: paid(1), finished(2),
    // it will update all orders with the given session sessionId and tableId, change the status to the given status
    // returns whether the order is successfully updated or not
}

exports.updateOrderStatus = (req, res) => {
    /*comment*/
    updateOrderStatus(req.category)
}

app.post("/updateOrderStatus", updateOrderStatus);





